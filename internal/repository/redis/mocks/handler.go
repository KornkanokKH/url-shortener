// Code generated by MockGen. DO NOT EDIT.
// Source: ./handler.go

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	gomock "github.com/golang/mock/gomock"
	newrelic "github.com/newrelic/go-agent/v3/newrelic"
	reflect "reflect"
	time "time"
	"url-shortener/internal/repository/redis"
)

// MockHandlerInterface is a mock of HandlerInterface interface
type MockHandlerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerInterfaceMockRecorder
}

// MockHandlerInterfaceMockRecorder is the mock recorder for MockHandlerInterface
type MockHandlerInterfaceMockRecorder struct {
	mock *MockHandlerInterface
}

// NewMockHandlerInterface creates a new mock instance
func NewMockHandlerInterface(ctrl *gomock.Controller) *MockHandlerInterface {
	mock := &MockHandlerInterface{ctrl: ctrl}
	mock.recorder = &MockHandlerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandlerInterface) EXPECT() *MockHandlerInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockHandlerInterface) Connect(config redis.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockHandlerInterfaceMockRecorder) Connect(config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockHandlerInterface)(nil).Connect), config)
}

// Disconnect mocks base method
func (m *MockHandlerInterface) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect
func (mr *MockHandlerInterfaceMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockHandlerInterface)(nil).Disconnect))
}

// Set mocks base method
func (m *MockHandlerInterface) Set(key string, value interface{}, exp time.Duration, txn *newrelic.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value, exp, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockHandlerInterfaceMockRecorder) Set(key, value, exp, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockHandlerInterface)(nil).Set), key, value, exp, txn)
}

// Get mocks base method
func (m *MockHandlerInterface) Get(key string, txn *newrelic.Transaction) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, txn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockHandlerInterfaceMockRecorder) Get(key, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHandlerInterface)(nil).Get), key, txn)
}

// Del mocks base method
func (m *MockHandlerInterface) Del(key string, txn *newrelic.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", key, txn)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockHandlerInterfaceMockRecorder) Del(key, txn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockHandlerInterface)(nil).Del), key, txn)
}
